DEFINE delimiter = '-------------------------------------------------------------'
DEFINE SCRIPT_NAME = 'create_ebr_tool_tables'

REM DROP TABLE ebr_tool_table;
REM DROP TABLE ebr_tool_log;
REM DROP TABLE ebr_tool_bucket;

PROMPT &&delimiter
PROMPT Script start: &&SCRIPT_NAME
PROMPT &&delimiter

DEFINE;

CREATE TABLE ebr_tool_bucket (
    id           INTEGER GENERATED BY DEFAULT  AS IDENTITY start with 1,
    bucket_name   VARCHAR2(100) NOT NULL,
    last_update   DATE DEFAULT sysdate,
    start_date    DATE,
    end_date      DATE,
    status        VARCHAR2(100),
    description   VARCHAR2(200)
);

COMMENT ON COLUMN ebr_tool_bucket.id IS 'Bucket number';
COMMENT ON COLUMN ebr_tool_bucket.bucket_name IS 'Bucket name';
COMMENT ON COLUMN ebr_tool_bucket.last_update IS 'Last update datetime in this database';
COMMENT ON COLUMN ebr_tool_bucket.start_date IS 'Date of start bucket';
COMMENT ON COLUMN ebr_tool_bucket.end_date IS 'Date of end bucket';
COMMENT ON COLUMN ebr_tool_bucket.status IS 'Status for the bucket (null, Planned, In Progress, Completed, Failed, Rolled back)';
COMMENT ON COLUMN ebr_tool_bucket.description IS 'Description for this bucket';

CREATE TABLE ebr_tool_table (
    id                 INTEGER GENERATED BY DEFAULT  AS IDENTITY START WITH 1,
    table_name         VARCHAR2(100) NOT NULL,
    ebr_tool_bucket_id INTEGER NOT NULL,
    new_table_name     VARCHAR2(100) NOT NULL,
    view_name          VARCHAR2(100),
    last_update        DATE DEFAULT sysdate,
    status             VARCHAR2(20),
    description        VARCHAR2(200)
);

COMMENT ON COLUMN ebr_tool_table.id IS 'Identifier';
COMMENT ON COLUMN ebr_tool_table.table_name IS 'Name of table which is going to be renamed';
COMMENT ON COLUMN ebr_tool_table.ebr_tool_bucket_id IS 'FOREIGN KEY to ebr_tool_bucket';
COMMENT ON COLUMN ebr_tool_table.new_table_name IS 'New name of table';
COMMENT ON COLUMN ebr_tool_table.view_name IS 'Name of view which was created after renaming should be same as table_name';
COMMENT ON COLUMN ebr_tool_table.last_update IS 'Last update datetime in this database';
COMMENT ON COLUMN ebr_tool_table.status IS 'Status for the current table (null, Renamed, View created)';
COMMENT ON COLUMN ebr_tool_table.description IS 'Description for this table';

CREATE TABLE ebr_tool_log (
    id                  INTEGER GENERATED BY DEFAULT  AS IDENTITY START WITH 1,
    ebr_tool_bucket_id  INTEGER,
    message_date        DATE DEFAULT sysdate NOT NULL,
	message_source      VARCHAR2(100),
	message_type        VARCHAR2(30) DEFAULT 'INFO' NOT NULL,
    log_message         VARCHAR2(2000) NOT NULL
);

COMMENT ON COLUMN ebr_tool_log.id IS 'Identifier';
COMMENT ON COLUMN ebr_tool_log.ebr_tool_bucket_id IS 'FOREIGN KEY to ebr_tool_bucket';
COMMENT ON COLUMN ebr_tool_log.message_date IS 'Running date, datetime in this database';
COMMENT ON COLUMN ebr_tool_log.message_source IS 'Source of message, such procedure_name, script name, etc...';
COMMENT ON COLUMN ebr_tool_log.message_type IS 'Message type such INFO, WARNING, ERROR';
COMMENT ON COLUMN ebr_tool_log.log_message IS 'Log message for every step';


ALTER TABLE ebr_tool_bucket
    ADD CONSTRAINT pk_ebr_tool_bucket_id
PRIMARY KEY (id);

ALTER TABLE ebr_tool_table
    ADD CONSTRAINT pk_ebr_tool_table_id
PRIMARY KEY (id);

ALTER TABLE ebr_tool_log
    ADD CONSTRAINT pk_ebr_log_id
PRIMARY KEY (id);

ALTER TABLE ebr_tool_table
    ADD CONSTRAINT fk_ebr_tool_bucket_ebr_tool_table_id
FOREIGN KEY (ebr_tool_bucket_id)
    REFERENCES ebr_tool_bucket (id);

ALTER TABLE ebr_tool_log
    ADD CONSTRAINT fk_ebr_tool_bucket_ebr_tool_log_id
FOREIGN KEY (ebr_tool_bucket_id)
    REFERENCES ebr_tool_bucket (id);

PROMPT &&delimiter
PROMPT Script end: &&SCRIPT_NAME
PROMPT &&delimiter
